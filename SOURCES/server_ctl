#!/bin/bash

if [ "${0:0:1}" = "/" ]; then
  # if $0 start with /, means abs path call this script sh
  base=$(dirname `dirname $0`)
else
  # else relative path call this sh script
  base=`pwd`/`dirname "/$0"`
  cd $base
  base=$(dirname `pwd`)
fi

cd $base;

BASE_HOME=`pwd`
PROJECT_NAME=honeycomb
PROJECT_DIR=$BASE_HOME/target/$PROJECT_NAME
PROJECT_TAR=$BASE_HOME/target/$PROJECT_NAME.tgz
BIN_WEB=$PROJECT_DIR/bin/server
PID_FILE=$BASE_HOME/run/honeycomb.pid

NODEJS_BIN=$PROJECT_DIR/node_modules/.bin/node
NGINX_BIN=/home/admin/nginx/sbin/nginx

export NODE_ENV='production'
export PATH=$PROJECT_DIR/node_modules/.bin:$PATH

# setting up alinode
export ENABLE_NODE_LOG=YES
export NODE_LOG_DIR=${BASE_HOME}/logs/

ulimit -c unlimited
echo "---- env for \"$PROJECT_NAME\" ----"
echo " DIR  : $PROJECT_DIR "
echo " NODE : $NODEJS_BIN "
echo "--------------------------------"

checkuser() {
  user=`id -nu`
  if [ $user != 'admin' ]; then
    echo "now using account: $user"
    echo "we recommend you to using admin account to run honeycomb"
    exit 3
  fi
}

ACTION=$1
usage() {
  echo "Usage: $0 {start|stop|status|restart|online|offline|deploy}"
  exit 1;
}
# tar PATH
statTime() {
   if [[ `echo $OSTYPE | grep -c 'darwin'` -eq 1 ]]; then
    time=`stat -f "%Sm" -t "%s" $1`
  else
    time=`stat -c '%Y' $1`
  fi
  return $time
}
## force user to be admin,but if in docker,ignore

if [ -z "$DOCKER_RUN" ]; then
  checkuser
fi

## decompress tgz file
need_tar=0
if [ -f $PROJECT_TAR ]; then
  # if [[ `echo $OSTYPE | grep -c 'darwin'` -eq 1 ]]; then
  #   tgz_time=`stat -f "%Sm" -t "%s" $PROJECT_TAR`
  #   dir_time=`stat -f "%Sm" -t "%s" $PROJECT_DIR`
  # else
  #   tgz_time=`stat -c '%Y' $PROJECT_TAR`
  #   dir_time=`stat -c '%Y' $PROJECT_DIR`
  # fi
  dir_time=0
  if [ -d $PROJECT_DIR ]; then
    statTime $PROJECT_DIR
    dir_time=$?
  fi
  statTime $PROJECT_TAR
  tgz_time=$?
  echo "tar time: $tgz_time, dir time: $dir_time"
  if [ $tgz_time -gt $dir_time ]; then
      need_tar=1
  fi
elif [ -d $PROJECT_DIR ]; then
  need_tar=0
else
  echo "neither tar $PROJECT_TAR found, nor dir found, you should re-install honeycomb"
  exit 1
fi

depress() {
  if [ $need_tar -eq 1 ]; then
    echo "decompress $PROJECT_TAR"
    rm -rf "$PROJECT_DIR"
    cd $BASE_HOME/target
    tar zxf $PROJECT_TAR
    touch $PROJECT_DIR
  fi

  if [ ! -d "$PROJECT_DIR" ]; then
    echo "$PROJECT_DIR directory is not exist"
    exit 1
  fi
}

backup() {
  if [ -f "$PROJECT_TAR" ]; then
    if [ ! -d "$BASE_HOME/target/backup" ]; then
      mkdir -p "$BASE_HOME/target/backup"
    fi
    if [[ `echo $OSTYPE | grep -c 'darwin'` -eq 1 ]]; then
      tgz_time=`stat -f "%Sm" -t "%Y%m%d%H%M%S" $PROJECT_TAR`
    else
      tgz_time=`stat -c '%y' $PROJECT_TAR|cut -c 1-19 | sed -e 's/[: -]//g'`
    fi
    BACK_FILE=$BASE_HOME/target/backup/${PROJECT_NAME}.$tgz_time.tgz
    test -f $BACK_FILE || cp -f $PROJECT_TAR $BACK_FILE
  fi
}

# get pid
pid=0
check_pid() {
  pid=`ps ax | grep ${NODEJS_BIN} | grep -v grep | grep 'dispatch' | awk '{print $1}'`
  if [ ! $pid ]; then
    return 0
  fi
  ps -p $pid > /dev/null
  if [ $? -eq 1 ]; then
    return 1
  fi
  return 0
}
nginx_stop() {
    echo 'stopping nginx'
    nginx_num=`ps -ef | grep nginx |grep -v grep -c`
    if [[ $nginx_num -ge 1 ]]; then
        ${NGINX_BIN} -s stop > /dev/null
        if [ $? -ne 0 ]; then
            kill $(ps aux | grep '[n]ginx' | awk '{print $2}')
            nginx_dead_num=`ps -ef |grep nginx |grep -v grep -c`
            if [[ $nginx_dead_num -ge 1 ]]; then
              echo 'nginx stop failed'
              exit 1;
            fi
        else
            echo 'nginx stoped'
        fi
    fi
    sleep 1
}
nginx_start(){
    echo 'starting nginx'
    local nginx_num=`ps ax | grep nginx |grep -v grep | wc -l`
    if [ $nginx_num -eq 0 ]; then
        ${NGINX_BIN} -s start > /dev/null
        if [ $? -ne 0 ]; then
            echo 'nginx start failed'
            exit 1;
        fi
        sleep 1
        echo 'nginx is started'
    else
        echo 'nginx is running'
    fi
}
online() {
  echo "Not yet support, please using restart"
}

offline() {
  echo 'server offline start'
  check_pid
  if [ $? -ne 0 ]; then
    echo 'server offline done'
    return $?
  fi
  # send SIGUSR2 to master to tell master $offline
  kill -31 $pid

  # wait 10's
  for ((i=0; i<10; i++)); do
    echo -n '.'
    sleep 1
  done

  echo
  echo "server offline done"
}

node_start() {
  echo 'server starting'
  if [ -x $NODEJS_BIN ]; then
    echo "using node: $NODEJS_BIN"
  else
    echo "Can not find node: $NODEJS_BIN"
    exit 1
  fi

  check_pid;
  if [ $? -eq 0 ]; then
    echo "Service is Running.";
    exit 0
  fi

  logs_dir=$BASE_HOME/logs
  mkdir -p $logs_dir

  if [ -f $logs_dir/nodejs_stdout.log ]; then
    mv $logs_dir/nodejs_stdout.log $logs_dir/nodejs_stdout.log.`date +"%Y-%m-%d_%H:%M:%S"`
  fi

  echo 'Starting Server:'
  nohup $NODEJS_BIN $PROJECT_DIR/dispatch.js > $logs_dir/nodejs_stdout.log 2>&1 &

  if [ $? -eq 0 ]; then
    flag=0
    count=0
    while [ $flag -eq 0 ]
    do
      res=`cat $logs_dir/nodejs_stdout.log | grep "SERVER_START_SUCCESSFULLY" | wc -l`
      if [ $res -eq 1 ]; then
        flag=1
        echo 'Done'
        break;
      fi
      count=`expr $count + 1`
      if [ $count -gt 120 ]; then
        flag=2
        echo 'timeout'
        break;
      fi
      echo -n '.'
      sleep 2
    done
    if [ $flag -eq 1 ]; then
      echo "server start successfully."
    elif [ $flag -eq 2 ]; then
      echo 'server start failed: server not ready'
    else
      echo 'server start failed'
    fi
    return 0
  else
    echo "server start failed."
    return 11
  fi
}

node_stop() {
  check_pid;
  if [ $? -ne 0 ]; then
    echo 'server not Running.'
    return $?
  fi

  echo 'node stopping'
  kill $pid

  for ((i=0; i<30; i++)); do
    check_pid;
    if [ $? -ne 0 ]; then
      echo ''
      echo "node stopped"
      return 0
    fi
    echo -n '.'
    sleep 1
  done
  echo ''
  echo "node stop Timeout."
  return 3
}

case "$ACTION" in
  start)
    depress
    nginx_start
    node_start
  ;;
  stop)
    nginx_stop
    node_stop
  ;;
  status)
    node_status
  ;;
  restart)
    offline
    depress
    node_stop
    nginx_stop
    nginx_start
    node_start
    # online
  ;;
  online)
    online
  ;;
  offline)
    offline
  ;;
  server)
    $NODEJS_BIN $PROJECT_DIR/bin/control $2 $3 $4
  ;;
  *)
    usage
  ;;
esac
